server:
  port: 8081
  servlet:
    context-path: /${CONTEXT_PATH}

spring:
  application:
    name: ${APP_NAME}

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: ${DRIVER_CLASS_NAME}
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: ${DATABASE_PLATFORM}
    properties:
      hibernate.format_sql: true

  kafka:
    #bootstrap-servers: kafka1:9092,kafka2:9093 # Dirección de los broker de Kafka
    # ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092,localhost:29093} 
    # localhost:29092,localhost:29093 → Valor por defecto si la variable no está definida.
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS} 
    #bootstrap-servers: ${KAFKA_HOST_IP:localhost}:29092,${KAFKA_HOST_IP:localhost}:29093 # Dirección de los broker de Kafka, usa la IP real de tu máquina
  
  producer:
      retries: ${KAFKA_PRODUCER_RETRIES}  # Número de reintentos en caso de fallo al enviar un mensaje.
      batch-size: ${KAFKA_PRODUCER_BATCH_SIZE}  # Tamaño máximo del lote antes de enviarlo.
      buffer-memory: ${KAFKA_PRODUCER_BUFFER_MEMORY}  # Memoria máxima utilizada por el buffer del productor.
      linger-ms: ${KAFKA_PRODUCER_LINGER_MS}  # Tiempo en milisegundos antes de enviar un lote de mensajes.
      acks: ${KAFKA_PRODUCER_ACKS}  # Se confirma el mensaje en todos los nodos para mayor confiabilidad.
      enable-idempotence: ${KAFKA_PRODUCER_ENABLE_IDEMPOTENCE}  # Evita duplicados asegurando la idempotencia.
      key-serializer: ${KAFKA_PRODUCER_KEY_SERIALIZER}  # Serializador para la clave.
      value-serializer: ${KAFKA_PRODUCER_VALUE_SERIALIZER}  # Serializador para el valor.

     
logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    mappings:
      enabled: true
